#include <thread>
#include <iostream>
#include <map>
#include <array>
#include <vector>
#include <atomic>

using namespace	std;

class peterson_mutex {
public:
	peterson_mutex() {
		want[0].store(false);
		want[1].store(false);
		victim.store(0);
	}
	void lock(int t) {
		want[t].store(true);
		victim.store(t);
		while (want[1 - t].load() && victim.load() == t) {
			this_thread::yield();
		}
	}
	void unlock(int t) {
		want[t].store(false);
	}
private:
	array<atomic<bool>, 2> want;
	atomic<int> victim;
};

class tree_mutex{
public:

	tree_mutex(size_t num_threads){
		size_t size = pow(2, (int)(log(num_threads) / log(2) + 1)) - 1;
		tree = vector<peterson_mutex>(size);
		h = log(tree.size())/log(2);
		
	}

	void lock(size_t thread_index){
		int cur = thread_index;
		int i = thread_index / 2 + pow(2, h) - 1;
		tree[i].lock(cur % 2);
		while (i > 0) {
			cur = i;
			i = (i-1)/2;
			tree[i].lock(abs(cur % 2 - 1));
		}

	}

	void unlock(size_t thread_index){
		vector<int> child(h+1);
		vector<int>	direct(h+1);
		int cur = thread_index / 2 + pow(2, h) - 1;
		int i = 0;
		child[h] = cur;
		direct[h] = thread_index % 2;
		for (int j = h - 1; j >= 0; --j){
			i = abs(cur % 2 - 1);
			cur = (cur - 1) / 2;
			child[j] = cur;
			direct[j] = i;
		}
		for (int i = 0; i <= h; ++i){
			tree.at(child[i]).unlock(direct[i]);
		}
	}

private:
	int h;
	vector<peterson_mutex> tree;
};
